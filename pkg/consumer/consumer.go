package consumer

import (
	"context"
	"encoding/json"
	"errors"
	"log"

	"github.com/jordan-wright/ossmalware/pkg/library"
	"gocloud.dev/pubsub"
	_ "gocloud.dev/pubsub/awssnssqs"
	_ "gocloud.dev/pubsub/gcppubsub"
)

var ErrEmpty = errors.New("no messages in queue")

type Consumer interface {
	Next() (library.Package, error)
}

type PubSubConsumer struct {
	subs *pubsub.Subscription
	url  string
}

func NewPubSubConsumer(ctx context.Context, url string) (*PubSubConsumer, error) {
	subs, err := pubsub.OpenSubscription(ctx, url)
	if err != nil {
		return nil, err
	}
	return &PubSubConsumer{
		subs: subs,
		url:  url,
	}, nil
}

func (c *PubSubConsumer) Next() (library.Package, error) {
	log.Printf("attempting to fetch message from %s", c.url)
	msgResult, err := c.subs.Receive(context.Background())
	if err != nil {
		return library.Package{}, err
	}
	defer msgResult.Ack()

	pkg := library.Package{}
	msg := msgResult.Body
	if err := json.Unmarshal(msg, &pkg); err != nil {
		return library.Package{}, err
	}

	return pkg, nil
}
