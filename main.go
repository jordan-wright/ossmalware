package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"

	"github.com/docker/docker/client"
	"github.com/jordan-wright/ossmalware/pkg/consumer"
	"github.com/jordan-wright/ossmalware/pkg/library"
	"github.com/jordan-wright/ossmalware/pkg/processor"
	"github.com/jordan-wright/ossmalware/pkg/uploader"
)

func packageWorker(ctx context.Context, workChan <-chan library.Package, outputChan chan *library.Output, cli *client.Client) {
	for pkg := range workChan {
		var p processor.Processor
		switch pkg.Type {
		case processor.TypePyPI:
			p = processor.NewPyPIProcessor()
		default:
			log.Printf("invalid type for package %s: %s\n", pkg.ID(), pkg.Type)
		}
		output, err := p.Process(ctx, cli, pkg)
		if err != nil {
			log.Println(err)
			continue
		}
		outputChan <- output
	}
}

func main() {
	ctx := context.Background()
	cli, err := client.NewEnvClient()
	if err != nil {
		log.Fatalf("error creating docker client: %v", err)
	}

	queueURL := os.Getenv("OSSMALWARE_QUEUE_URL")
	cs, err := consumer.NewPubSubConsumer(ctx, queueURL)
	if err != nil {
		log.Fatalf("error creating consumer: %v", err)
	}

	uploadURL := os.Getenv("OSSMALWARE_UPLOAD_BUCKET_URL")
	uploader, err := uploader.NewBlobUploader(ctx, uploadURL)
	if err != nil {
		log.Fatalf("error creating uploader: %v", err)
	}

	packageChan := make(chan library.Package)
	outputChan := make(chan *library.Output)

	// Setup the signal handling
	closeChan := make(chan os.Signal, 1)
	signal.Notify(closeChan, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		<-closeChan
		log.Println("ctrl+c received. shutting down.")
		close(packageChan)
		close(outputChan)
	}()

	// Start the package processors in the background
	var wg sync.WaitGroup
	for i := 0; i < 5; i++ {
		wg.Add(1)
		go func(id int) {
			log.Printf("creating worker %d", id)
			packageWorker(ctx, packageChan, outputChan, cli)
			wg.Done()
		}(i)
	}

	// Poll for new packages to process
	go func() {
		// Loop on received messages.
		for {
			pkg, err := cs.Next()
			if err != nil {
				// Errors from Receive indicate that Receive will no longer succeed.
				log.Printf("Receiving message: %v", err)
				break
			}
			packageChan <- pkg
		}
	}()

	// For every package we've processed, upload the results to S3
	for output := range outputChan {
		log.Printf("processing result for %s", output.Package.ID())
		err := uploader.Upload(*output)
		if err != nil {
			log.Printf("error uploading package to s3: %v", err)
		}
	}
	wg.Wait()
}
