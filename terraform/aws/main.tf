resource "aws_sqs_queue" "oss-malware-sqs" {
  name                       = local.sqs_name
  message_retention_seconds  = 86400
  receive_wait_time_seconds  = 10
  visibility_timeout_seconds = 1800
}

resource "aws_s3_bucket" "oss-malware-results" {
  bucket = local.s3_name

}

resource "aws_s3_bucket_acl" "oss-malware-results" {
  bucket = aws_s3_bucket.oss-malware-results.id
  acl    = "private"
}

resource "aws_iam_instance_profile" "oss-malware" {
  name = local.profile_name
  role = aws_iam_role.oss-malware.name
}

resource "aws_iam_role" "oss-malware" {
  name = local.role_name
  path = "/"

  assume_role_policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
               "Service": "ec2.amazonaws.com"
            },
            "Effect": "Allow",
            "Sid": ""
        }
    ]
}
EOF
}


resource "aws_iam_policy" "oss-malware" {
  name        = local.policy_name
  description = "oss-malware policy"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sqs:*"
      ],
      "Effect": "Allow",
      "Resource": "*"
    },
  {
      "Action": [
        "s3:*"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "oss-malware" {
  role       = aws_iam_role.oss-malware.name
  policy_arn = aws_iam_policy.oss-malware.arn
}

resource "aws_launch_template" "oss-malware" {
  name                                 = local.template_name
  ebs_optimized                        = true
  image_id                             = data.aws_ami.linux.id
  instance_initiated_shutdown_behavior = "terminate"
  instance_type                        = var.instance_type

  instance_market_options {
    market_type = var.spot_enabled ?  "spot" : null
  }

  vpc_security_group_ids = [
    aws_security_group.oss-malware.id,
  ]
  iam_instance_profile  {
    arn = aws_iam_instance_profile.oss-malware.arn
  }
  key_name = var.ssh_key_name != "" ? var.ssh_key_name : null

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = local.ec2_name
    }
  }
  user_data = base64encode(templatefile("${path.module}/scripts/boot.sh", {
    ossmalware_queue_url         = format("%s?region=%s", replace(aws_sqs_queue.oss-malware-sqs.url, "https", "awssqs"), var.region),
    ossmalware_upload_bucket_url = "s3://${local.s3_name}"
  }))

  metadata_options {
    http_endpoint               = "enabled"
    http_tokens                 = "required"
    http_put_response_hop_limit = 1
    instance_metadata_tags      = "enabled"
  }
  # we don't want to create a new template just because there is a newer AMI
  lifecycle {
    ignore_changes = [
      image_id,
    ]
  }
}

resource "aws_autoscaling_group" "oss-malware" {
  name                      = local.asg_name
  health_check_type         = "EC2"
  health_check_grace_period = 600
  termination_policies      = ["OldestInstance"]
  vpc_zone_identifier       = var.subnet_ids

  launch_template {
    id      = aws_launch_template.oss-malware.id
    version = aws_launch_template.oss-malware.latest_version
  }
  min_size = var.worker_asg_size
  max_size = var.worker_asg_size
  instance_refresh {
    strategy = "Rolling"
    preferences {
      min_healthy_percentage = 50
    }
  }
  lifecycle {
    create_before_destroy = true
  }

}

resource "aws_security_group" "oss-malware" {
  name        = local.sg_name
  vpc_id      = var.vpc_id
  description = "oss-malware ec2 security group"
}

resource "aws_security_group_rule" "asg_ig_mgmt" {
  count             = local.access_enable ? 1 : 0
  type              = "ingress"
  from_port         = 22
  to_port           = 22
  protocol          = "tcp"
  cidr_blocks       = var.ssh_allowed_cidr
  security_group_id = aws_security_group.oss-malware.id
  description       = "worker ssh ingress rule"
}


resource "aws_security_group_rule" "asg_eg_https" {
  type      = "egress"
  from_port = 443
  to_port   = 443
  protocol  = "tcp"
  cidr_blocks = [
    "0.0.0.0/0"
  ]
  security_group_id = aws_security_group.oss-malware.id
  description       = "worker https egress"
}

resource "aws_security_group_rule" "asg_eg_http" {
  type      = "egress"
  from_port = 80
  to_port   = 80
  protocol  = "tcp"
  cidr_blocks = [
    "0.0.0.0/0"
  ]
  security_group_id = aws_security_group.oss-malware.id
  description       = "worker http egress"
}
